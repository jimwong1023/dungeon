var YROW = 10;
var XCOL = 10;
var ZDEP = 3;

function Game (z, y, x) {
	this.grid = new Grid(z, y, x);
	this.animator = new Animator();
	this.players = [];
}

// Grid

function Grid (z, y, x) {
	this.dep = z;
	this.rows = y;
	this.cols = x;

	this.gridState = [];
	this.clearGridState(z, y, x);
}

Grid.prototype.clearGridState = function (z, y, x) {
	//Generate new Z by Y by X grid
	for ( var dep = 0; dep < z; dep++ ) {
		this.gridState[dep] = [];
		for ( var row = 0; row < y; row++ ) {
			this.gridState[dep][row] = [];
			for ( var col = 0; col < x; col++ ) {
				var room = new Room(dep, row, col);
				this.gridState[dep][row].push(room);
			}
		}
	}
}

Grid.prototype.isLegalMove = function (newZ, newY, newX) {
	if (newZ > this.dep || newZ < 0 || newY > this.rows || newY < 0 || newX > this.cols || newX < 0) {
		return false;
	}
	else if (this.gridState[newZ][newY][newX].solid) {
		return false;
	}
	else {
		return true;
	}
}

Grid.prototype.legalMoves = function (curZ, curY, curX) {
	var moves = []

	// Find better algorithm
	if (this.isLegalMove(curZ, curY - 1, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY, curX + 1)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY + 1, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY, curX - 1)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ - 1, curY, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ + 1, curY, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}

	return moves;
}

// Room
function Room (z, y, x) {
	this.solid = this.isSolid();
	this.players = [];
	this.items = [];

	this.gridZ = z;
	this.gridY = y;
	this.gridX = x;
	// May want to just randomize single wall texture to save on processing time.
	this.wall0 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall1 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall2 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall3 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.walls = [this.wall0, this.wall1, this.wall2, this.wall3];

	this.door = DOORURLS[0];

	this.floor = FLOORURLS[0];

	this.ceiling = CEILURLS[0];
}

Room.prototype.isSolid = function () {
	if (Math.random() > 0.2) {
		return false;
	}
	else {
		return true;
	}
}

// Player

function Player () {
	// 0 True North (looking at grid), 1 East, 2 South, 3 West
	this.directions = [0,1,2,3];
	this.direction = 0;
	this.items = [];

	this.gridZ = null;
	this.gridY = null;
	this.gridX = null;
}