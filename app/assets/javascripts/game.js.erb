var YROW = 10;
var XCOL = 10;
var ZDEP = 3;

function Game (z, y, x) {
	this.grid = new Grid(z, y, x);
	this.animator = new Animator();
	this.player = new Player(0,0,0);
}

Game.prototype.getInput = function (e) {
	e.preventDefault();
	console.log(e.keyCode);
	var player = this.player
	var direction = player.direction

	switch (e.keyCode) {
		case 38: {
			switch (direction) {
				case 0: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY - 1, player.gridX)) {
						player.gridY--;
						this.update();
					}
				}
				break;

				case 1: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX + 1)) {
						player.gridX++;
						this.update();
					}
				}
				break;

				case 2: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY + 1, player.gridX)) {
						player.gridY++;
						this.update();
					}
				}
				break;

				case 3: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX - 1)) {
						player.gridX--;
						this.update();
					}
				}
			}
		}
		break;

		case 39: {
			switch (direction) {
				case 0: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX + 1)) {
						player.gridX++;
						player.direction = 1;
						this.update();
					}
				}
				break;
				case 1: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY + 1, player.gridX)) {
						player.gridY++;
						player.direction = 2;
						this.update();
					}
				}
				break;
				case 2: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX - 1)) {
						player.gridX--;
						player.direction = 3;
						this.update();
					}
				}
				break;
				case 3: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY - 1, player.gridX)) {
						player.gridY--;
						player.direction = 0;
						this.update();
					}
				}
				break;
			}
		}
		break;

		case 40: {
			switch (direction) {
				case 0: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY + 1, player.gridX)) {
						player.gridY++;
						player.direction = 2;
						this.update();
					}
				}
				break;
				case 1: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX - 1)) {
						player.gridX--;
						player.direction = 3;
						this.update();
					}
				}
				break;
				case 2: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY - 1, player.gridX)) {
						player.gridY--;
						player.direction = 0;
						this.update();
					}
				}
				break;
				case 3: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX + 1)) {
						player.gridX++;
						player.direction = 1;
						this.update();
					}
				}
				break;
			}
		}
		break;

		case 37: {
			switch (direction) {
				case 0: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX - 1)) {
						player.gridX--;
						player.direction = 3;
						this.update();
					}
				}
				break;
				case 1: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY - 1, player.gridX)) {
						player.gridY--;
						player.direction = 0;
						this.update();
					}
				}
				break;
				case 2: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY, player.gridX + 1)) {
						player.gridX++;
						player.direction = 1;
						this.update();
					}
				}
				break;
				case 3: {
					if (this.grid.isLegalMove(player.gridZ, player.gridY + 1, player.gridX)) {
						player.gridY++;
						player.direction = 2;
						this.update();
					}
				}
				break;
			}
		}
		break;

		case 87: {
			if (this.grid.isLegalMove(player.gridZ - 1, player.gridY, player.gridX)) {
				player.gridZ--;
				this.update();
			}
		}
		break;

		case 83: {
			if (this.grid.isLegalMove(player.gridZ + 1, player.gridY, player.gridX)) {
				player.gridZ++;
				this.update();
			}
		}
		break;
	}
}

Game.prototype.update = function () {
	this.animator.clearScene();
	var direction = this.player.direction;
	var posZ = this.player.gridZ;
	var posY = this.player.gridY;
	var posX = this.player.gridX;
	console.log(posZ, posY, posX);
	console.log(direction);

	this.animator.addAnim(this.animator.createWalls(this.grid.gridState[posZ][posY][posX], direction));
	this.animator.addAnim(this.animator.createFloorCeiling(this.grid.gridState[posZ][posY][posX]));
	this.animator.addAnim(this.animator.createDoors(this.grid.gridState[posZ][posY][posX], direction, this.grid.legalMoves(posZ, posY, posX)));
	this.animator.render();
}

// Grid

function Grid (z, y, x) {
	this.dep = z;
	this.rows = y;
	this.cols = x;

	this.gridState = [];
	this.clearGridState(z, y, x);
}

Grid.prototype.clearGridState = function (z, y, x) {
	//Generate new Z by Y by X grid
	for ( var dep = 0; dep < z; dep++ ) {
		this.gridState[dep] = [];
		for ( var row = 0; row < y; row++ ) {
			this.gridState[dep][row] = [];
			for ( var col = 0; col < x; col++ ) {
				var room = new Room(dep, row, col);
				this.gridState[dep][row].push(room);
			}
		}
	}
}

Grid.prototype.isLegalMove = function (newZ, newY, newX) {
	if (newZ >= this.dep || newZ < 0 || newY >= this.rows || newY < 0 || newX >= this.cols || newX < 0) {
		return false;
	}
	else if (this.gridState[newZ][newY][newX].solid) {
		return false;
	}
	else {
		return true;
	}
}

Grid.prototype.legalMoves = function (curZ, curY, curX) {
	var moves = []

	// Find better algorithm
	if (this.isLegalMove(curZ, curY - 1, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY, curX + 1)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY + 1, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ, curY, curX - 1)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ - 1, curY, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}
	if (this.isLegalMove(curZ + 1, curY, curX)) {
		moves.push(true);
	}
	else { 
		moves.push(false); 
	}

	return moves;
}

// Room
function Room (z, y, x) {
	this.solid = this.isSolid();
	this.players = [];
	this.items = [];

	this.gridZ = z;
	this.gridY = y;
	this.gridX = x;
	// May want to just randomize single wall texture to save on processing time.
	this.wall0 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall1 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall2 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.wall3 = WALLURLS[Math.floor(Math.random() * WALLURLS.length)];
	this.walls = [this.wall0, this.wall1, this.wall2, this.wall3];

	this.door = DOORURLS[0];

	this.floor = FLOORURLS[0];

	this.ceiling = CEILURLS[0];
}

Room.prototype.isSolid = function () {
	if (Math.random() > 0.2) {
		return false;
	}
	else {
		return true;
	}
}

// Player

function Player (z, y, x) {
	// 0 True North (looking at grid), 1 East, 2 South, 3 West
	this.directions = [0,1,2,3];
	this.direction = 0;
	this.items = [];

	this.gridZ = z;
	this.gridY = y;
	this.gridX = x;
}