function Animator () {
	this.scene = new THREE.Scene();
	this.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000);
	this.renderer = new THREE.WebGLRenderer();
	this.renderer.setSize( window.innerWidth, window.innerHeight);
	
	document.body.appendChild( this.renderer.domElement );
	this.look = new THREE.Vector3(0, 100, 0);
	this.camera.position.set(0, 150, 200);
	this.camera.lookAt(this.look);
}

Animator.prototype.render = function () {
	requestAnimationFrame( this.render.bind(this) );
	this.renderer.render(this.scene, this.camera);
}

Animator.prototype.createWalls = function (room, direction) {
	var backWall, rightWall, leftWall;
	var temp = direction
	// Need to refactor
	backWall = new BackWall(room.walls[direction]);
	if (direction === 3) {
	  direction = -1;
	}
	rightWall = new RightWall(room.walls[direction + 1]);
	direction = temp
	
	if (direction === 1) { direction = -3 } else if ( direction === 2) { direction = -2 } else if (direction === 3) { direction = -1 }
	leftWall = new LeftWall(room.walls[direction + 3]);

	return [backWall, rightWall, leftWall];
}

Animator.prototype.createFloorCeiling = function (room, direction) {
	var floor = new Floor(room.floor);
	var ceiling = new Ceiling(room.ceiling);

	return [floor, ceiling];
}

Animator.prototype.createDoors = function (room, direction, moveArr) {
	var doors = []
	var temp = direction
	// Need to Refactor!
	if (moveArr[direction] === true) {
		var backDoor = new BackDoor(room.door);
		doors.push(backDoor);
	}
	if (direction === 3) { direction = -1 }
	if (moveArr[direction + 1]) {
		var rightDoor = new RightDoor(room.door);
		doors.push(rightDoor);
	}
	direction = temp
	if (direction === 1) { direction = -3 } else if (direction === 2) { direction = -2 } else if (direction === 3) { direction = -1 }
	if (moveArr[direction + 3]) {
		var leftDoor = new LeftDoor(room.door);
		doors.push(leftDoor);
	}

	if (moveArr[4]) {
		var ceilingDoor = new CeilingDoor(room.door);
		doors.push(ceilingDoor);
	}
	if (moveArr[5]) {
		var floorDoor = new FloorDoor(room.door);
		doors.push(floorDoor);
	}

	return doors;
}

Animator.prototype.addAnim = function (artArr) {
	for ( var i = 0; i < artArr.length; i++ ) {
		this.scene.add(artArr[i].mesh);
	}
}

Animator.prototype.clearScene = function () {
	var objsToRemove = _.rest(this.scene.children, 0);
	var that = this;
	_.each(objsToRemove, function(object) {
		that.scene.remove(object);
	});
}

$(document).ready(function () {
	// var animator = new Animator();
	// var rightWall = new RightWall(WALLURLS[3]);
	// var leftWall = new LeftWall(WALLURLS[2]);
	// var test = new RightWall(WALLURLS[1])

	// animator.addAnim([rightWall, leftWall]);

	// animator.render();

	// setTimeout(function() {
	// 	console.log("FIVE SEC");
	// 	animator.clearObject(rightWall);

	// 	animator.addAnim(test);

	// 	animator.render();
	// }, 2000);
	var game = new Game(ZDEP, YROW, XCOL);
	// game.animator.addAnim(game.animator.createWalls(game.grid.gridState[1][5][5], 0));
	// game.animator.addAnim(game.animator.createFloorCeiling(game.grid.gridState[1][5][5]));
	// game.animator.addAnim(game.animator.createDoors(game.grid.gridState[1][5][5], 0, game.grid.legalMoves(1,5,5)));
	// game.animator.render();
	game.update();
	document.onkeydown = game.getInput.bind(game);
})